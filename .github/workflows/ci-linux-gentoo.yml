name: CI - Gentoo
run-name: CI / Linux / Gentoo on ${{ github.head_ref || github.ref_name }}
on:
  workflow_call:
    secrets:
      CI_GPG_KEY:
        required: true
      CI_GPG_PASSPHRASE:
        required: true
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-gentoo
  cancel-in-progress: true

jobs:
  linux-gentoo:
    runs-on: ubuntu-latest
    name: Install and Test on Linux (gentoo)
    services:
      portage:
        image: gentoo/portage:latest
        volumes:
          - portage:/var/db/repos/gentoo

    container:
      image: gentoo/stage3:latest
      options: --privileged --cap-add=SYS_PTRACE
      volumes:
        - portage:/var/db/repos/gentoo

    steps:
      - name: restore binpkgs cache
        id: cache
        uses: actions/cache/restore@v4
        env:
          cache-name: cache-binpkgs

        with:
          path: /var/cache/binpkgs
          key: ${{ env.cache-name }}-latest
          restore-keys:
            ${{ env.cache-name }}-

      - name: import gpg key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.CI_GPG_KEY }}
          passphrase: ${{ secrets.CI_GPG_PASSPHRASE }}
          trust_level: 5

      - name: enable install binary packages feature
        run: |
          echo 'FEATURES="buildpkg binpkg-signing binpkg-request-signature getbinpkg"' >> /etc/portage/make.conf
          echo 'BINPKG_GPG_SIGNING_GPG_HOME=/github/home/.gnupg' >> /etc/portage/make.conf
          keyid=$(gpg --list-keys --keyid-format=long | grep ^pub | sed -e 's/^[^/]*\///' -e 's/\s.*'//)
          fingerprint=$(gpg --list-keys | grep '^\s' | sed 's/\s*//')
          echo "BINPKG_GPG_SIGNING_KEY=0x$keyid" >> /etc/portage/make.conf
          getuto
          gpg --homedir /etc/portage/gnupg --import-ownertrust <(echo "$fingerprint:6:")
          gpg --output - --export "0x$keyid" | gpg --homedir /etc/portage/gnupg --import -
          echo -e "y\ny\n" | gpg -v --pinentry-mode loopback --homedir /etc/portage/gnupg \
            --passphrase-file /etc/portage/gnupg/pass --batch --command-fd 0 --expert --edit-key "$fingerprint" sign
          mkdir /run/lock
          tee </etc/portage/make.conf

      - name: note initial binpkgs info
        id: initial-binpkgs
        run: |
          echo sha1="$(sha1sum /var/cache/binpkgs/Packages | cut -d' ' -f1)" \
            >> "$GITHUB_OUTPUT"

      - name: install pre-requisites
        run: |
          # rust-bin is here to speed up compilation time in CI, it's not strictly a pre-req
          emerge dev-lang/rust-bin app-admin/sudo

      - name: checkout
        uses: actions/checkout@v4

      - name: install chezmoi
        run: sh -c "$(curl -fsLS get.chezmoi.io)" -- -b /usr/local/bin

      - name: add ci user
        run: |
          groupadd -r ci
          useradd -r ci -g ci -m
          [ ! -d /etc/sudoers.d ] && mkdir /etc/sudoers.d
          echo 'ci ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ci

      - name: init dotfiles
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}
        run: |
          sudo \
            DOTFILES_DEVTOOLS=true \
            DOTFILES_DEVTOOLS_C=true \
            DOTFILES_DEVTOOLS_DOCKER=true \
            DOTFILES_DEVTOOLS_EXTRA=true \
            DOTFILES_DEVTOOLS_GO=true \
            DOTFILES_DEVTOOLS_HASKELL=true \
            DOTFILES_DEVTOOLS_JS=true \
            DOTFILES_DEVTOOLS_K8S=true \
            DOTFILES_DEVTOOLS_LUA=true \
            DOTFILES_DEVTOOLS_PHP=true \
            DOTFILES_DEVTOOLS_RUBY=true \
            -iu ci chezmoi init --apply cjw6k --branch "$BRANCH"

      - name: verify utilities are present
        run: .github/linux/confirm-installed-utils.sh gentoo

      - name: verify ci user has fish-shell
        run: |
          test "$(tee </etc/passwd | grep ^ci: | grep -oP '[^:]+$')" = "$(readlink -f $(which fish))"

      - name: run tests
        run: sudo -iu ci fishtape /home/ci/.config/dotfiles/tests.fish

      - name: note final binpkgs info
        if: ${{ always() }}
        id: final-binpkgs
        run: |
          echo sha1="$(sha1sum /var/cache/binpkgs/Packages | cut -d' ' -f1)" \
            >> "$GITHUB_OUTPUT"

      - name: save binpkgs cache
        if: ${{ always() && (steps.initial-binpkgs.outputs.sha1 != steps.final-binpkgs.outputs.sha1) }}
        uses: actions/cache/save@v4
        env:
          cache-name: cache-binpkgs

        with:
          path: /var/cache/binpkgs
          key: ${{ env.cache-name }}-${{ steps.final-binpkgs.outputs.sha1 }}
